From 1e13276d9dac1ecd4aff19a50b750270d967a994 Mon Sep 17 00:00:00 2001
From: Hongze Zhang <hongze.zzz123@gmail.com>
Date: Mon, 17 Mar 2025 09:31:56 +0000
Subject: [PATCH] Avoid cyclic reference on drivers' shared pointers created by
 DriverBlockingState

---
 velox/exec/Task.cpp | 8 ++++----
 velox/exec/Task.h   | 5 +++--
 2 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/velox/exec/Task.cpp b/velox/exec/Task.cpp
index cb3f48a75..b86bfd098 100644
--- a/velox/exec/Task.cpp
+++ b/velox/exec/Task.cpp
@@ -696,7 +696,7 @@ RowVectorPtr Task::next(ContinueFuture* future) {
     driverBlockingStates_.reserve(drivers_.size());
     for (auto i = 0; i < drivers_.size(); ++i) {
       driverBlockingStates_.emplace_back(
-          std::make_unique<DriverBlockingState>(drivers_[i].get()));
+          std::make_shared<DriverBlockingState>(drivers_[i].get()));
     }
   }

@@ -3253,7 +3253,7 @@ void Task::DriverBlockingState::setDriverFuture(
   std::move(driverFuture)
       .via(&folly::InlineExecutor::instance())
       .thenValue(
-          [&, driverHolder = driver_->shared_from_this()](auto&& /* unused */) {
+          [&, driverHolder = shared_from_this()](auto&& /* unused */) {
             std::vector<std::unique_ptr<ContinuePromise>> promises;
             {
               std::lock_guard<std::mutex> l(mutex_);
@@ -3272,7 +3272,7 @@ void Task::DriverBlockingState::setDriverFuture(
           })
       .thenError(
           folly::tag_t<std::exception>{},
-          [&, driverHolder = driver_->shared_from_this()](
+          [&, holder = shared_from_this(), taskId = driver_->task()->taskId()](
               std::exception const& e) {
             std::vector<std::unique_ptr<ContinuePromise>> promises;
             {
@@ -3283,7 +3283,7 @@ void Task::DriverBlockingState::setDriverFuture(
               try {
                 VELOX_FAIL(
                     "A driver future from task {} was realized with error: {}",
-                    driver_->task()->taskId(),
+                    taskId,
                     e.what());
               } catch (const VeloxException&) {
                 error_ = std::current_exception();
diff --git a/velox/exec/Task.h b/velox/exec/Task.h
index 86250463a..d7adaaa7d 100644
--- a/velox/exec/Task.h
+++ b/velox/exec/Task.h
@@ -1121,7 +1121,8 @@ class Task : public std::enable_shared_from_this<Task> {
   std::vector<std::shared_ptr<Driver>> drivers_;

   // Tracks the blocking state for each driver under serialized execution mode.
-  class DriverBlockingState {
+  class DriverBlockingState
+      : public enable_shared_from_this<DriverBlockingState> {
    public:
     explicit DriverBlockingState(Driver* driver) : driver_(driver) {
       VELOX_CHECK_NOT_NULL(driver_);
@@ -1164,7 +1165,7 @@ class Task : public std::enable_shared_from_this<Task> {
   };

   // Tracks the driver blocking state under serialized execution mode.
-  std::vector<std::unique_ptr<DriverBlockingState>> driverBlockingStates_;
+  std::vector<std::shared_ptr<DriverBlockingState>> driverBlockingStates_;

   // When Drivers are closed by the Task, there is a chance that race and/or
   // bugs can cause such Drivers to be held forever, in turn holding a pointer
--
2.43.0

