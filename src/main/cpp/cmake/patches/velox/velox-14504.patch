Index: velox/dwio/common/SelectiveStructColumnReader.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/velox/dwio/common/SelectiveStructColumnReader.cpp b/velox/dwio/common/SelectiveStructColumnReader.cpp
--- a/velox/dwio/common/SelectiveStructColumnReader.cpp	(revision 17580eb388f739f847df30b1596e471a515ca265)
+++ b/velox/dwio/common/SelectiveStructColumnReader.cpp	(revision ae29b5d8a86bcde4ca88956361a2e6ad01c6fecc)
@@ -189,6 +189,24 @@
   }
 }
 
+bool isChildMissingFromFileType(
+    const velox::common::ScanSpec& childSpec,
+    const std::shared_ptr<const dwio::common::TypeWithId>& fileType) {
+  switch (fileType->type()->kind()) {
+    case TypeKind::MAP:
+      // If this is the case it means this is a flat map,
+      // so it can't have "missing" fields.
+      return false;
+    case TypeKind::ROW:
+      // The file is in row type, check if the field name is missing from
+      // the child types.
+      return !asRowType(fileType->type())->containsChild(childSpec.fieldName());
+    default:
+      // Otherwise, consider the field is missing if the child channel exceeds
+      // the file type size.
+      return childSpec.channel() >= fileType->size();
+  }
+}
 } // namespace
 
 void SelectiveStructColumnReaderBase::filterRowGroups(
@@ -517,18 +535,15 @@
   return
       // The below check is trying to determine if this is a missing field in a
       // struct that should be constant null.
-      (!isRoot_ && // If we're in the root struct channel is meaningless in this
-                   // context and it will be a null constant anyway if it's
-                   // missing.
-       childSpec.channel() !=
-           velox::common::ScanSpec::kNoChannel && // This can happen if there's
-                                                  // a filter on a subfield of a
-                                                  // row type that doesn't exist
-                                                  // in the output.
-       fileType_->type()->kind() !=
-           TypeKind::MAP && // If this is the case it means this is a flat map,
-                            // so it can't have "missing" fields.
-       childSpec.channel() >= fileType_->size());
+      !isRoot_ && // If we're in the root struct channel is meaningless in this
+                  // context and it will be a null constant anyway if it's
+                  // missing.
+      childSpec.channel() !=
+      velox::common::ScanSpec::kNoChannel && // This can happen if there's
+                                             // a filter on a subfield of a
+                                             // row type that doesn't exist
+                                             // in the output.
+      isChildMissingFromFileType(childSpec, fileType_);
 }
 
 void SelectiveStructColumnReaderBase::getValues(
